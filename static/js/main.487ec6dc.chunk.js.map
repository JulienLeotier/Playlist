{"version":3,"sources":["consts.js","reducers/currentSongReducer.js","reducers/playlistReducer.js","reducers/index.js","store/index.js","Utils.js","actions/index.js","components/Header/index.js","components/Footer/index.js","views/Music Player/index.js","components/Playlist/index.js","App/App.js","serviceWorker.js","index.js"],"names":["constants","SET_SONG_DATA","SET_SONG_DURATION","SET_LYRICS_DATA","SET_PLAYLIST_DATA","FETCH_PLAYLIST_BEGIN","FETCH_PLAYLIST_FAILURE","SET_CURRENT_SONG_INDEX","SET_AUDIO_DATA","SET_PLAY_STATE","SHOW_PLAYLIST","initialState","song_name","undefined","artist_name","song_duration","song_album_art","song_audio_link","song_lyrics_data","song_lyrics_link","play","playlistData","loading","error","currentSongIndex","audioData","showPlaylist","reducer","combineReducers","song","state","action","type","consts","payload","playlist","store","createStore","applyMiddleware","thunk","Utils","response","ok","Error","status","getPlaylist","dispatch","fetch","credentials","method","then","handleErrors","res","json","songs","catch","fetchPlaylistFailure","currentSongData","data","author","albumart","audio","parseSongData","setLyricsData","setCurrentSongIndex","index","setAudioData","setPlayState","Header","togglePlaylist","props","setShowPlaylist","showPlaylistBool","this","showPlaylistBoolClass","id","className","onClick","Component","connect","Footer","handleTouchDrag","e","time","width","offsetX","totalTime","duration","document","querySelector","clientWidth","getBoundingClientRect","left","percent","parseInt","touches","clientX","style","paused","pause","currentTime","setState","seek","handleDrag","togglePlay","children","classList","contains","remove","add","bindKeysHandler","event","stopPropagation","preventDefault","keycode","keyCode","which","repeat","shuffle","nextSong","prevSong","addedTime","parseTime","minutes","seconds","setTotalTime","removeEventListener","console","log","setCurrentTime","setSongData","length","getNextNum","except","val","Math","random","Audio","timer","src","addEventListener","setInterval","clearInterval","window","prevProps","prevState","onTouchStart","onMouseDown","MusicPlayer","setIntervalFunction","updateLyricsOnTop","clearIntervalFunction","lyrics_elements","querySelectorAll","totalOnTop","set_once","forEach","element","thisTime","getAttribute","nextTime","centerize","getLyricsData","onTopElement","a","height","c","factor","top","parentNode","scrollTo","lyrics_content","push","key","data-time","line","lyrics","Playlist","searchSongs","query","currentTarget","value","toLowerCase","trim","textContent","includes","display","array","showPlaylistClass","songs_list","i","floor","splice","data-index","playThisSong","alt","App","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.487ec6dc.chunk.js","sourcesContent":["const constants = {\n    SET_SONG_DATA: \"SET_SONG_DATA\",\n    SET_SONG_DURATION: \"SET_SONG_DURATION\",\n    SET_LYRICS_DATA: \"SET_LYRICS_DATA\",\n    SET_PLAYLIST_DATA: \"SET_PLAYLIST_DATA\",\n    FETCH_PLAYLIST_BEGIN: \"FETCH_PLAYLIST_BEGIN\",\n    FETCH_PLAYLIST_FAILURE: \"FETCH_PLAYLIST_FAILURE\",\n    SET_CURRENT_SONG_INDEX: \"SET_CURRENT_SONG_INDEX\",\n    SET_AUDIO_DATA: \"SET_AUDIO_DATA\",\n    SET_PLAY_STATE: \"SET_PLAY_STATE\",\n    SHOW_PLAYLIST: \"SHOW_PLAYLIST\"\n}\nexport default constants;","import consts from '../consts';\n\nconst initialState = {\n    song_name: undefined,\n    artist_name: undefined,\n    song_duration: undefined,\n    song_album_art: undefined,\n    song_audio_link: undefined,\n    song_lyrics_data: undefined,\n    song_lyrics_link: undefined,\n    play: false\n}\n\nexport default function setSongData(state=initialState,action){\n    switch(action.type){\n        case consts.SET_SONG_DATA:\n            return {\n                ...state,\n                song_name: action.payload.song_name,\n                artist_name: action.payload.artist_name,\n                song_album_art: action.payload.song_album_art,\n                song_lyrics_link: action.payload.song_lyrics_link,\n                song_audio_link: action.payload.song_audio_link\n            }\n        case consts.SET_SONG_DURATION:\n            return {\n                ...state,\n                song_duration: action.payload.song_duration\n            }\n        case consts.SET_LYRICS_DATA:\n            return {\n                ...state,\n                song_lyrics_data: action.payload.song_lyrics_data,\n            }\n        case consts.SET_PLAY_STATE:\n            return {\n                ...state,\n                play: action.payload.play\n            }\n        default:\n            return {\n                ...state\n            }\n    }\n}","import consts from '../consts';\n\nconst initialState = {\n    playlistData: undefined,\n    loading: false,\n    error: null,\n    currentSongIndex: undefined,\n    audioData: undefined,\n    showPlaylist: true\n}\n\nexport default function setSongData(state = initialState, action) {\n    switch (action.type) {\n        case consts.FETCH_PLAYLIST_BEGIN:\n            return {\n                ...state,\n                loading: true,\n                error: null\n            }\n        case consts.FETCH_PLAYLIST_FAILURE:\n            return {\n                ...state,\n                loading: false,\n                error: action.payload.error\n            }\n        case consts.SET_PLAYLIST_DATA:\n            return {\n                ...state,\n                loading: false,\n                playlistData: action.payload.playlistData,\n                error: null\n            }\n        case consts.SET_CURRENT_SONG_INDEX:\n            return {\n                ...state,\n                currentSongIndex: action.payload.currentSongIndex\n            }\n        case consts.SET_AUDIO_DATA:\n            return {\n                ...state,\n                audioData: action.payload.audioData\n            }\n        case consts.SHOW_PLAYLIST:\n            return {\n                ...state,\n                showPlaylist: action.payload.showPlaylist\n            }\n        default:\n            return {\n                ...state\n            }\n    }\n}","import { combineReducers } from 'redux';\nimport song from './currentSongReducer';\nimport playlist from './playlistReducer';\n\nconst reducer = combineReducers({\n    song, playlist\n});\n\nexport default reducer;","import { createStore, applyMiddleware } from \"redux\";\nimport reducer from \"../reducers\";\nimport thunk from \"redux-thunk\";\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nexport default store;","export default class Utils{\n    static handleErrors(response){\n        if(!response.ok){\n            throw new Error(response.status)\n        }\n        return response;\n    }\n}","import consts from '../consts';\nimport Utils from '../Utils'\n\nexport const fetchPlaylistBegin = () => ({\n    type: consts.FETCH_PLAYLIST_BEGIN\n});\n\nexport const fetchPlaylistSuccess = playlistData => ({\n    type: consts.SET_PLAYLIST_DATA,\n    payload: { playlistData }\n});\n\nexport const fetchPlaylistFailure = error => ({\n    type: consts.FETCH_PLAYLIST_FAILURE,\n    payload: { error }\n});\n\nexport function getPlaylist() {\n    return dispatch => {\n        dispatch(fetchPlaylistBegin());\n        return fetch('/playlist/playlist.json', {\n                credentials: 'omit',\n                method: \"GET\"\n            })\n            .then(Utils.handleErrors)\n            .then(res => res.json())\n            .then(json => {\n                dispatch(fetchPlaylistSuccess(json.songs));\n            })\n            .catch(error => {\n                dispatch(fetchPlaylistFailure(error));\n            });\n    };\n}\nexport const parseSongData = data => ({\n    type: consts.SET_SONG_DATA,\n    payload: {\n        song_name: data.song,\n        artist_name: data.author,\n        song_album_art: data.albumart,\n        song_lyrics_link: data.json,\n        song_audio_link: data.audio\n    }\n})\nexport function currentSongData(data) {\n    return dispatch => {\n        dispatch(parseSongData(data));\n    }\n}\n\nexport const setLyricsData = song_lyrics_data => ({\n    type: consts.SET_LYRICS_DATA,\n    payload: { song_lyrics_data }\n});\n\nexport function getLyricsData(data) {\n    return dispatch => {\n        dispatch(setLyricsData([{ line: 'Loading', time: 0 }]));\n        return fetch(data, {\n                credentials: 'omit',\n                method: \"GET\"\n            })\n            .then(Utils.handleErrors)\n            .then(res => res.json())\n            .then(json => {\n                dispatch(setLyricsData(json.lyrics));\n            })\n            .catch(error => {\n                dispatch(setLyricsData([{ 'line': 'Unable to load lyrics' }]));\n            });\n    };\n}\nexport const setCurrentSongIndex = index => ({\n    type: consts.SET_CURRENT_SONG_INDEX,\n    payload: {\n        currentSongIndex: index\n    }\n})\nexport const setAudioData = audioData => ({\n    type: consts.SET_AUDIO_DATA,\n    payload: { audioData }\n})\n\nexport const setPlayState = play => ({\n    type: consts.SET_PLAY_STATE,\n    payload: { play }\n})\nexport const showPlaylist = showPlaylist => ({\n    type: consts.SHOW_PLAYLIST,\n    payload: { showPlaylist }\n})","import React, { Component } from 'react';\nimport './_style.scss';\nimport { connect } from 'react-redux';\nimport { showPlaylist, setAudioData } from '../../actions';\n\nclass Header extends Component {\n    togglePlaylist = () => {\n        let { setShowPlaylist, showPlaylistBool } = this.props;\n        setShowPlaylist(!showPlaylistBool);\n    }\n    render() {\n        let { song_name, artist_name, showPlaylistBool } = this.props;\n        let showPlaylistBoolClass = (showPlaylistBool) ? \"hide\" : \"\";\n        return (\n            <header>\n                <div id=\"top-bar\" className=\"flex vrtlCenter\">\n                    <button id=\"back\" onClick={this.togglePlaylist}><i className=\"fa fa-arrow-left\"></i></button>\n                    <div id=\"about-song\" className={`${showPlaylistBoolClass}`}>\n                        <h2 className=\"song-name\">{song_name}</h2>\n                        <h4 className=\"artist-name low-text-opacity\">{artist_name}</h4></div>\n                </div>\n            </header>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    song_name: state.song.song_name,\n    artist_name: state.song.artist_name,\n    showPlaylistBool: state.playlist.showPlaylist\n})\nconst mapDispatchToProps = dispatch => ({\n    setShowPlaylist: data => dispatch(showPlaylist(data)),\n    setAudioData: data => dispatch(setAudioData(data))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);","import React, { Component } from 'react';\nimport './_style.scss';\nimport { connect } from 'react-redux';\nimport { currentSongData, setAudioData, setCurrentSongIndex, setPlayState, showPlaylist } from '../../actions';\n\nclass Footer extends Component {\n    constructor(props) {\n        super(props);\n        let audio = new Audio();\n        props.setAudioData(audio);\n        this.state = {\n            totalTime: undefined,\n            currentTime: \"-:--\",\n            audio: audio,\n            timer: undefined,\n            percent: 0,\n            src: undefined,\n            play: false,\n            seek: false,\n            repeat: false,\n            shuffle: false\n        }\n    }\n    componentDidMount() {\n        let audio = this.state.audio;\n        audio.addEventListener('playing', (e) => {\n            console.log(\"Audio is Playing\");\n            this.setState({\n                timer: setInterval(this.setCurrentTime, 1000)\n            });\n        });\n        audio.addEventListener('pause', (e) => {\n            console.log(\"Audio is Paused\");\n            clearInterval(this.state.timer);\n        });\n        audio.addEventListener('loadeddata', (e) => {\n            console.log(\"Total Time is set!\");\n            this.setTotalTime();\n        });\n        audio.addEventListener('ended', (e) => {\n            console.log(\"Song ended!\");\n            this.nextSong();\n        });\n        window.addEventListener('mouseup', (e) => {\n            window.removeEventListener('mousemove', this.handleDrag);\n            if (this.state.play)\n                this.state.audio.play();\n            this.setState({\n                audio: audio,\n                seek: false\n            })\n        });\n        window.addEventListener('touchend', (e) => {\n            window.removeEventListener('touchmove', this.handleTouchDrag);\n            if (this.state.play)\n                this.state.audio.play();\n            this.setState({\n                audio: audio,\n                seek: false\n            })\n        });\n        window.addEventListener('keyup', this.bindKeysHandler);\n    }\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.song_audio_link !== this.props.song_audio_link) {\n            console.log(\"Audio is Changed\");\n            let audio = this.state.audio;\n            audio.src = this.props.song_audio_link;\n            if (this.state.play) { audio.play(); }\n            this.setState({\n                totalTime: \"-:--\",\n                currentTime: \"0:00\",\n                percent: 0,\n                src: this.props.song_audio_link\n            });\n        }\n        if (this.state.play !== prevState.play) {\n            this.props.setPlayState(this.state.play);\n        }\n        else if (this.state.play === prevState.play && this.state.play !== this.props.play) {\n            this.togglePlay();\n        }\n    }\n    handleTouchDrag = (e) => {\n        let time, totalTime = this.state.audio.duration, width, offsetX;\n        let audio = this.state.audio;\n        width = document.querySelector('#progress-bar').clientWidth;\n        offsetX = document.querySelector('#progress-bar').getBoundingClientRect().left;\n        var percent = parseInt(e.touches[0].clientX - offsetX) / parseInt(width) * 100;\n        time = parseInt(totalTime * (percent / 100));\n        if (percent > 100) percent = 100;\n        document.querySelector('#progress').style.width = percent + \"%\";\n        if (!audio.paused)\n            audio.pause();\n        if (time >= totalTime)\n            audio.currentTime = totalTime - 1;\n        else\n            audio.currentTime = time;\n        this.setState({\n            audio: audio,\n            seek: true\n        })\n    }\n    handleDrag = (e) => {\n        let time, totalTime = this.state.audio.duration, width, offsetX;\n        let audio = this.state.audio;\n        width = document.querySelector('#progress-bar').clientWidth;\n        offsetX = document.querySelector('#progress-bar').getBoundingClientRect().left;\n        var percent = parseInt(e.clientX - offsetX) / parseInt(width) * 100;\n        time = parseInt(totalTime * (percent / 100));\n        if (percent > 100) percent = 100;\n        document.querySelector('#progress').style.width = percent + \"%\";\n        if (!audio.paused)\n            audio.pause();\n        if (time >= totalTime)\n            audio.currentTime = totalTime - 1;\n        else\n            audio.currentTime = time;\n        this.setState({\n            audio: audio,\n            seek: true\n        })\n    }\n    togglePlay = () => {\n        let e = document.querySelector('#menu #play');\n        if (e.children[0].classList.contains(\"fa-play\")) {\n            e.children[0].classList.remove(\"fa-play\");\n            e.children[0].classList.add(\"fa-pause\");\n            this.state.audio.play();\n            this.setState({\n                play: true\n            });\n        }\n        else {\n            e.children[0].classList.remove(\"fa-pause\");\n            e.children[0].classList.add(\"fa-play\");\n            this.state.audio.pause();\n            this.setState({\n                play: false\n            });\n        }\n    }\n    bindKeysHandler = (event) => {\n        event.stopPropagation();\n        event.preventDefault();\n        var keycode = (event.keyCode ? event.keyCode : event.which);\n        if (keycode === 32) {\n            this.togglePlay();\n        }\n        else if (keycode === 82) {\n            this.setState({ repeat: !this.state.repeat });\n        }\n        else if (keycode === 83) {\n            this.setState({ shuffle: !this.state.shuffle });\n        }\n        else if (keycode === 78) {\n            this.nextSong();\n        }\n        else if (keycode === 80) {\n            this.prevSong();\n        }\n        else if (keycode === 27) {\n            this.togglePlaylist();\n        }\n        else if (keycode === 39) {\n            let audio = this.state.audio;\n            let addedTime = ((audio.currentTime * 1000) + 5000) / 1000;\n            if (addedTime >= audio.duration) {\n                audio.currentTime = ((audio.duration * 1000) - 1000) / 1000;\n            }\n            else {\n                audio.currentTime = addedTime;\n            }\n            this.setState({ audio: audio });\n        }\n        else if (keycode === 37) {\n            let audio = this.state.audio;\n            let addedTime = ((audio.currentTime * 1000) - 5000) / 1000;\n            if (addedTime <= 0) {\n                audio.currentTime = 0;\n            }\n            else {\n                audio.currentTime = addedTime;\n            }\n            this.setState({ audio: audio });\n        }\n    }\n    togglePlaylist = () => {\n        let { setShowPlaylist, showPlaylistBool } = this.props;\n        setShowPlaylist(!showPlaylistBool);\n    }\n    parseTime = (time) => {\n        let minutes = parseInt(time / 60000);\n        var seconds = parseInt((time % 60000) / 1000);\n        if (seconds < 10) { seconds = `0${seconds}`; }\n        return `${minutes}:${seconds}`;\n    }\n    setTotalTime = () => {\n        this.setState({\n            totalTime: this.parseTime(parseInt(this.state.audio.duration * 1000))\n        });\n        this.state.audio.removeEventListener('loadeddata', (e) => {\n            console.log(\"Total Time is set!\");\n            this.setTotalTime();\n        });\n    }\n    setCurrentTime = () => {\n        let { audio } = this.state;\n        this.setState({\n            currentTime: this.parseTime(parseInt(audio.currentTime * 1000)),\n            percent: (audio.currentTime / audio.duration) * 100\n        });\n    }\n    prevSong = () => {\n        let { playlistData, currentSongIndex, setCurrentSongIndex, setSongData } = this.props;\n        if (playlistData !== undefined && playlistData.length > 0) {\n            let index = ((currentSongIndex - 1 + playlistData.length) % playlistData.length);\n            setCurrentSongIndex(index)\n            setSongData(playlistData[index]);\n        }\n    }\n    getNextNum = (shuffle, except) => {\n        while (shuffle) {\n            let val = parseInt(Math.random() * 100);\n            if ((val % except) !== 0) {\n                return val;\n            }\n        }\n        return 1;\n    }\n    nextSong = () => {\n        let { playlistData, currentSongIndex, setCurrentSongIndex, setSongData } = this.props;\n        let { shuffle, repeat } = this.state;\n        if (playlistData !== undefined && playlistData.length > 0) {\n            let next = this.getNextNum(shuffle, playlistData.length);\n            let index = ((currentSongIndex + next) % playlistData.length);\n            if ((currentSongIndex + 1) === playlistData.length && repeat === false) {\n                this.setState({\n                    play: false\n                });\n            }\n            setCurrentSongIndex(index)\n            setSongData(playlistData[index]);\n        }\n    }\n    render() {\n        let { totalTime, currentTime, percent, repeat, shuffle } = this.state;\n        return (\n            <footer>\n                <div id=\"player\">\n                    <div id=\"bar\" className=\"flex vrtlCenter hrtlCenter\">\n                        <div id=\"currentTime\">{currentTime}</div>\n                        <div id=\"progress-bar\" onTouchStart={\n                            (e) => {\n                                e.stopPropagation();\n                                this.handleTouchDrag(e);\n                                window.addEventListener('touchmove', this.handleTouchDrag)\n                            }\n                        } onMouseDown={\n                            (e) => {\n                                e.stopPropagation();\n                                this.handleDrag(e);\n                                window.addEventListener('mousemove', this.handleDrag)\n                            }\n                        }>\n                            <div id=\"progress\" style={{ width: `${percent}%` }}>\n                                <i id=\"progressButton\" className=\"fa fa-circle\" onTouchStart={\n                                    (e) => {\n                                        e.stopPropagation();\n                                        window.addEventListener('touchmove', this.handleTouchDrag)\n                                    }\n                                } onMouseDown={\n                                    (e) => {\n                                        e.stopPropagation();\n                                        window.addEventListener('mousemove', this.handleDrag)\n                                    }\n                                }></i>\n                            </div>\n                        </div>\n                        <div id=\"totalTime\">{(totalTime === undefined) ? currentTime : totalTime}</div>\n                    </div>\n                    <div id=\"menu\">\n                        <button id=\"repeat\" className={(!repeat) ? `off` : ``} onClick={(e) => this.setState({ repeat: !repeat })}><i className=\"fa fa-repeat\"></i></button>\n                        <button id=\"prev\" onClick={this.prevSong}><i className=\"fa fa-step-backward\"></i></button>\n                        <button id=\"play\" onClick={(e) => this.togglePlay()}><i className=\"fa fa-play\"></i></button>\n                        <button id=\"next\" onClick={this.nextSong}><i className=\"fa fa-step-forward\"></i></button>\n                        <button id=\"shuffle\" className={(!shuffle) ? `off` : ``} onClick={(e) => this.setState({ shuffle: !shuffle })}><i className=\"fa fa-random\"></i></button>\n                    </div>\n                </div>\n            </footer>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    song_audio_link: state.song.song_audio_link,\n    currentSongIndex: state.playlist.currentSongIndex,\n    playlistData: state.playlist.playlistData,\n    play: state.song.play,\n    showPlaylistBool: state.playlist.showPlaylist\n})\nconst mapDispatchToProps = (dispatch) => ({\n    setSongData: data => dispatch(currentSongData(data)),\n    setCurrentSongIndex: data => dispatch(setCurrentSongIndex(data)),\n    setAudioData: data => dispatch(setAudioData(data)),\n    setPlayState: data => dispatch(setPlayState(data)),\n    setShowPlaylist: data => dispatch(showPlaylist(data))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Footer);","import React, { Component } from 'react';\nimport './_style.scss';\nimport { connect } from 'react-redux';\nimport { currentSongData, getLyricsData, setCurrentSongIndex } from '../../actions';\n\nclass MusicPlayer extends Component {\n    constructor(props) {\n        super(props);\n        let { playlistData, setSongData, setCurrentSongIndex, song_name } = props;\n        if (playlistData !== undefined && playlistData.length > 0 && song_name === undefined) {\n            let index = 0;\n            setCurrentSongIndex(index)\n            setSongData(playlistData[index]);\n        }\n        this.state = {\n            timer: undefined\n        }\n    }\n    componentDidMount() {\n        let audio = this.props.audioData;\n        if (audio === undefined) return;\n        else if (this.props.song_lyrics_link !== undefined) {\n            audio.addEventListener('playing', this.setIntervalFunction);\n            audio.addEventListener('pause', this.clearIntervalFunction);\n            console.log(\"Lyrics Updated!\");\n            this.props.getLyricsData(this.props.song_lyrics_link);\n        }\n    }\n    componentWillUnmount() {\n        let audio = this.props.audioData;\n        if (audio === undefined) return;\n        audio.removeEventListener('playing', this.setIntervalFunction);\n        audio.removeEventListener('pause', this.clearIntervalFunction);\n    }\n    setIntervalFunction = () => {\n        console.log(\"Lyrics Synchronization is resumed\");\n        this.setState({\n            timer: setInterval(this.updateLyricsOnTop, 1000)\n        });\n    }\n    clearIntervalFunction = () => {\n        console.log(\"Lyrics Synchronization is paused\");\n        clearInterval(this.state.timer);\n    }\n    centerize() {\n        if (document.querySelectorAll(\".on-top\").length === 0) return;\n        let onTopElement = document.querySelector(\".on-top\");\n        var a = onTopElement.getBoundingClientRect().height;\n        var c = document.querySelector(\"#lyrics\").getBoundingClientRect().height;\n        var d = onTopElement.getBoundingClientRect().top - onTopElement.parentNode.getBoundingClientRect().top;\n        let factor = 1 / 3;\n        if (c < 200) {\n            factor = 1 / 50;\n        }\n        var e = d + (a / 2) - (c * factor);\n        if (e < 0) e = 0;\n        document.querySelector(\"#lyrics\").scrollTo(0, e);\n    }\n    updateLyricsOnTop = () => {\n        let lyrics_elements = document.querySelectorAll(\"#lyrics-content > h2\");\n        let totalOnTop = document.querySelectorAll(\"#lyrics-content > h2.on-top\");\n        let set_once = true;\n        try {\n            lyrics_elements.forEach((element, index) => {\n                if (index === 0) {\n                    let thisTime = parseInt(element.getAttribute(\"data-time\"));\n                    let currentTime = parseInt(this.props.audioData.currentTime * 1000);\n                    if (currentTime < thisTime) {\n                        if (totalOnTop.length > 0) {\n                            totalOnTop.forEach(e => {\n                                e.classList.remove(\"on-top\");\n                            });\n                        }\n                        throw new Error(\"No need to iterate further\");\n                    }\n                }\n                if (element.classList.contains(\"on-top\")) {\n                    element.classList.remove(\"on-top\");\n                    element.classList.add(\"on-view\");\n                }\n                if ((index + 1) < lyrics_elements.length && set_once === true) {\n                    let nextTime = parseInt(lyrics_elements[index + 1].getAttribute(\"data-time\"));\n                    let currentTime = parseInt(this.props.audioData.currentTime * 1000);\n                    if (currentTime < nextTime) {\n                        if (!element.classList.contains(\"on-top\")) {\n                            element.classList.add(\"on-top\");\n                            this.centerize();\n                            set_once = false;\n                            return;\n                        }\n                    }\n                }\n                else if (element !== undefined && (index + 1) === lyrics_elements.length) {\n                    let nextTime = parseInt(lyrics_elements[index].getAttribute(\"data-time\"));\n                    let currentTime = parseInt(this.props.audioData.currentTime * 1000);\n                    if (currentTime >= nextTime) {\n                        if (!element.classList.contains(\"on-top\")) {\n                            element.classList.add(\"on-top\");\n                        }\n                    }\n                }\n            });\n        }\n        catch (e) {\n            return;\n        }\n    }\n    render() {\n        let { song_lyrics_data } = this.props;\n        let lyrics_content = [];\n\n        if (song_lyrics_data !== undefined && song_lyrics_data.length > 0) {\n            lyrics_content = [];\n            song_lyrics_data.forEach((element, index) => {\n                lyrics_content.push(<h2 key={index} data-time={element.time}>{element.line}</h2>);\n            });\n        }\n        return (\n            <>\n                <section>\n                    <div id=\"lyrics\">\n                        <div id=\"lyrics-content\">\n                            {lyrics_content}\n                        </div>\n                    </div>\n                </section>\n            </>\n\n        );\n    }\n}\nconst mapStateToProps = state => ({\n    playlistData: state.playlist.playlistData,\n    song_name: state.song.song_name,\n    artist_name: state.song.artist_name,\n    song_lyrics_link: state.song.song_lyrics_link,\n    song_lyrics_data: state.song.song_lyrics_data,\n    audioData: state.playlist.audioData\n})\nconst mapDispatchToProps = (dispatch) => ({\n    setSongData: data => dispatch(currentSongData(data)),\n    getLyricsData: data => dispatch(getLyricsData(data)),\n    setCurrentSongIndex: data => dispatch(setCurrentSongIndex(data))\n})\nexport default connect(mapStateToProps, mapDispatchToProps)(MusicPlayer);","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport './_style.scss';\nimport { currentSongData, setCurrentSongIndex, setPlayState, showPlaylist } from '../../actions';\n\nclass Playlist extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            showPlaylist: 'show'\n        }\n    }\n    playThisSong(index, array) {\n        let { setCurrentSongIndex, setSongData, currentSongIndex, setPlayState, play, setShowPlaylist } = this.props;\n        if (index !== currentSongIndex && play === false) {\n            setPlayState(true);\n        }\n        else if (currentSongIndex === index) {\n            setPlayState(!play);\n        }\n        setCurrentSongIndex(index)\n        setSongData(array[index]);\n        setShowPlaylist(false)\n    }\n    searchSongs = (e) => {\n        let query = e.currentTarget.value.toLowerCase().trim();\n        document.querySelectorAll('.song-list-row').forEach(element => {\n            if (element.textContent.toLowerCase().includes(query))\n                element.style.display = \"flex\";\n            else\n                element.style.display = \"none\";\n        });\n    }\n    render() {\n        let { playlistData, song_name, play, showPlaylist, setPlayState } = this.props;\n        let showPlaylistClass;\n        if (showPlaylist) {\n            setPlayState(false);\n            showPlaylistClass = 'show';\n        } else {\n            showPlaylistClass = ''\n        }\n        let songs_list = [];\n        if (playlistData !== undefined && playlistData.length > 0) {\n            songs_list = [];\n            let array = [];\n            for(let i = 0; i < 2; i++){\n                let random = Math.floor(Math.random() * playlistData.length)\n                array.push(playlistData[random])\n                console.log(random)\n                playlistData.splice(random, 1)\n            }\n            array.forEach((element, index) => {\n                songs_list.push(\n                    <div key={index} data-index={index} className=\"flex vrtlCenter hrtlCenter song-list-row element options\" onClick={(e) => this.playThisSong(index, array)}>\n                        <div className=\"album-art\">\n                            <img alt={element.song} src={element.albumart} />\n                        </div>\n                        <div className=\"song-details\">\n                            <h2 className=\"song\">{element.song}</h2>\n                            <h4 className=\"artist\">{element.author}</h4>\n                        </div>\n                        <div className=\"options\">\n                            {(song_name === element.song && play) && (<p>50</p>)}\n                            {(song_name !== element.song || !play) && (<p>50</p>)}\n                        </div>\n                    </div>\n                );\n            });\n        }\n        return (\n            <div id=\"playlist\" className={`${showPlaylistClass}`}>\n                <div id=\"show-box\">\n                    <div id=\"show-list\">\n                        {(songs_list.length > 0) && (\n                            <div className=\"song-list\">\n                                {songs_list}\n                            </div>\n                        )}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    playlistData: state.playlist.playlistData,\n    song_name: state.song.song_name,\n    currentSongIndex: state.playlist.currentSongIndex,\n    play: state.song.play,\n    showPlaylist: state.playlist.showPlaylist\n});\nconst mapDispatchToProps = (dispatch) => ({\n    setSongData: data => dispatch(currentSongData(data)),\n    setCurrentSongIndex: data => dispatch(setCurrentSongIndex(data)),\n    setPlayState: data => dispatch(setPlayState(data)),\n    setShowPlaylist: data => dispatch(showPlaylist(data))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Playlist);","import React, { Component } from 'react';\nimport './App.scss';\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { connect } from 'react-redux';\nimport Header from '../components/Header';\nimport Footer from '../components/Footer';\nimport MusicPlayer from '../views/Music Player';\nimport { getPlaylist } from '../actions';\nimport Playlist from '../components/Playlist';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    let { playlistData, loading, getPlaylist } = props;\n    if (playlistData === undefined && loading === false) {\n      getPlaylist();\n    }\n  }\n  render() {\n    let { song_album_art } = this.props;\n    return (\n      <Router>\n        <img className=\"album-art-background\" alt=\"album-art-background\" src={song_album_art} />\n        <Header />\n        <Switch>\n          <Route exact path=\"/\" component={() => <MusicPlayer />} />\n        </Switch>\n        <Playlist />\n        <Footer />\n      </Router>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  playlistData: state.playlist.playlistData,\n  loading: state.playlist.loading,\n  song_album_art: state.song.song_album_art\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    getPlaylist: () => dispatch(getPlaylist()),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport store from './store';\nimport App from './App/App';\nimport './sass/index.scss'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={store}>\n      <App/>\n    </Provider>,\n    document.getElementById(\"root\")\n  );\n\nserviceWorker.unregister();"],"sourceRoot":""}